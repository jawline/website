{"articles": [[{"id": "ig", "title": "Graduate Software Engineer - IG", "create_date": 1533832112.37042, "tags": ["work"], "human_time": "2018-08-09 16:28:32", "desc": "<p>IG is the world-leading provider of contracts for difference (CFDs) and financial spread betting, and the UK's largest forex provider.</p><p>I joined IG as a graduate developer in 2014. Over my first year there I will be working in several teams in the company, taking on a variety of different software development roles.</p><p>Working at IG has given me key experience in developing large complex systems, working as a member of an agile team, and working with dependencies in extremely complex system being contributed to by many different teams. It has also given me experience with frontend development and Javascript, an area of software engineering that I had not really explored.</p>"}, "articles/ig.html"], [{"id": "static_as_blog", "title": "Developing a statically served blog", "create_date": 1533847368.225782, "tags": ["tutorials", "web", "python"], "human_time": "2018-08-09 20:42:48", "desc": ""}, "articles/static_as_blog.html"], [{"id": "dawn", "title": "Dawn OS", "create_date": 1533832324.066645, "tags": ["projects"], "human_time": "2018-08-09 16:32:04", "desc": "<p>Dawn is a x86 based operating system (OS) with a process scheduler, virtual memory manager, application loader, a defined set of system calls and a host of other features. This project was undertaken as part of an optional A-level module. The project involved development of a operating system kernel and a set of utility programs, as well as the design of a set of tools designed for the OS which allow the user to interact and perform tasks. The code was primarily written in C (C99), with small amounts of assembly used in the Kernel, as well as some bash or python scripts to automate compilation and deployment of the OS.</p>"}, "articles/dawn.html"], [{"title": "LJIT", "id": "ljit", "date": "2017", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>As a recent hobby project I have been working to improve my knowledge of ahead-of-time (AOT) and just-in-time (JIT) compilers. To that end I developed a new LISP style language with a AOT compiler. The project was developed in C++ and includes a LL(1) parser, a AST structure and a AST -> Machine code JIT converter. The resulting language is a simple integer only language which supports recursion and function arguments.</p>"}, "articles/ljit.html"], [{"title": "Scribble", "id": "scribble", "date": "2013 to 2015", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>For my university dissertation I designed and implemented a programming language and virtual machine. The language was designed to make extending existing C++ applications easier and to enable users to extend a programs functionality, increasing the usefulness of a piece of software. The implementation also attempts to reduce the likelihood of security issues by allowing developers to strictly control what functionality the virtual machine exposes to the end user through a simple interface, allowing them to control what access the scripts will have to the host platform.</p>"}, "articles/scribble.html"], [{"id": "expose_high_fidelity_logs", "title": "A short tutorial on logging in ExpoSE", "create_date": 1533847431.223146, "tags": ["expose", "tutorials", "javascript"], "human_time": "2018-08-09 20:43:51", "desc": ""}, "articles/expose_high_fidelity_logs.html"], [{"id": "brave", "title": "Brave Software", "create_date": 1533833028.846177, "tags": ["work"], "human_time": "2018-08-09 16:43:48", "desc": ""}, "articles/brave.html"], [{"id": "z3javascript", "title": "Z3JavaScript", "create_date": 1533834597.7674901, "tags": ["projects"], "human_time": "2018-08-09 17:09:57", "desc": "\n\n<p>Before we can symbolically execute JavaScript we need a way to invoke an SMT solver directly from JavaScript, however we found that there is almost no existing language support for Node.js. To remedy this we developed Z3JavaScript, an NPM-installable set of bindings to the popular SMT solver Z3. In addition to a set of primitive bindings we provide a set of wrapper classes to simplify usage from JavaScript. We also provide a regular expression rewriter which allows for reasoning about regular expressions, capture groups, and backreferences in programs.</p>\n\n"}, "articles/z3javascript.html"], [{"id": "cloudflare", "title": "A Solution to Compression Oracles on the Web - Cloudflare", "create_date": 1533833022.682019, "tags": ["work", "research"], "human_time": "2018-08-09 16:43:42", "desc": "<p>Compression is often considered an essential tool when reducing the bandwidth usage of internet services. The impact that the use of such compression schemes can have on security, however, has often been overlooked. The recently detailed CRIME, BREACH, TIME and HEIST attacks on TLS have shown that if an attacker can make requests on behalf of a user then secret information can be extracted from encrypted messages using only the length of the response. Deciding whether an element of a web-page should be secret often depends on the content of the page, however there are some common elements of web-pages which should always remain secret such as Cross-Site Request Forgery (CSRF) tokens. Such tokens are used to ensure that malicious webpages cannot forge requests from a user by enforcing that any request must contain a secret token included in a previous response.</p><p>I worked at Cloudflare last summer to investigate possible solutions to this problem. The result is a project called cf-nocompress. The aim of this project was to develop a tool which automatically mitigates instances of the attack, in particular CSRF extraction, on Cloudflare hosted services transparently without significantly impacting the effectiveness of compression. We have published a proof-of-concept implementation on GitHub, and provide a challenge site and tool which demonstrates the attack in action).</p>"}, "articles/cloudflare.html"], [{"id": "walking_app", "title": "Runnymede Explored - National Trust", "create_date": 1533832016.114681, "tags": ["work"], "human_time": "2018-08-09 16:26:56", "desc": "<p>Throughout 2013 and 2014 I was part of a small agile development team which was tasked with creating a program capable of giving historical information on walks through the Magna Carta site in preparation for the 800 year anniversary of its signing.</p><p>The project required the development of a visual editor, a web frontend, an Android and iPhone application and a server backend. All of the application front ends and the editor interacted with a server which enabled us to easily create and display a large database of information about the site in a formatted way.</p><p>The server also allowed the entire database to be dumped in JSON, which allowed for offline viewing of the walks, an important feature as the Magna Carta site had limited wireless data coverage.</p>"}, "articles/walking_app.html"], [{"title": "Analyzing modern (ES6) JavaScript with Jalangi2", "id": "es6jalangi", "date": "2018", "create_date": 1533832867.3697422, "tags": ["research"], "human_time": "2018-08-09 16:41:07", "desc": "<p>As part of a recent piece of work with ExpoSE we found that Jalangi2 often fails to analyze JavaScript programs which use features from recent JavaScript standards. In particular, a common point of failure is the use of let or const keywords. As such, we were unable to analyze a large number of the libraries we downloaded from the NPM package manager. As we want to be able to execute ExpoSE on real-world software we had to find a modification of Jalangi2 that would permit analysis of such code.</p>"}, "articles/es6jalangi.html"], [{"id": "isg", "title": "PhD - Information Security Group - Royal Holloway", "create_date": 1533833018.571521, "tags": ["work"], "human_time": "2018-08-09 16:43:38", "desc": "<p>I began a PhD with the Information Security Group (ISG) at Royal Holloway in September 2015 as part of the Cyber Security CDT. The CDT is set to take 4 years to complete during which I will be exposed to a wide variety of topics relating to the security of computing devices such as static and dynamic program analysis, cryptography, and network security.</p>"}, "articles/isg.html"], [{"title": "ExpoSE: Practical Symbolic Execution of Standalone JavaScript", "id": "expose", "date": "2015 onward", "create_date": 1533834600.512846, "tags": ["projects", "research", "papers"], "human_time": "2018-08-09 17:10:00", "desc": "\n\n<p>JavaScript has evolved into a versatile ecosystem for not just the\nweb, but also a wide range of server-side and client-side applications.\nWith this increased scope, the potential impact of bugs increases.\nDespite this, testing tools for JavaScript have remained relatively primitive,\nlargely due to the languages complex implementation and confusing specification.</p>\n\n<p>ExpoSE is a dynamic symbolic execution (DSE) tool for JavaScript with support for asynchronous events, strings, and complex regular expressions (including capture groups). It also supports concurrent test-case execution and provides detailed coverage statistics.</p>\n\n"}, "articles/expose.html"], [{"id": "rewrite_scripts_chrome", "title": "How to rewrite incoming JavaScript in Chromium", "create_date": 1533847554.552199, "tags": ["javascript", "tutorials", "chromium"], "human_time": "2018-08-09 20:45:54", "desc": ""}, "articles/rewrite_scripts_chrome.html"], [{"id": "kiniro", "title": "Kiniro", "create_date": 1533832291.134073, "tags": ["projects", "games"], "human_time": "2018-08-09 16:31:31", "desc": ""}, "articles/kiniro.html"]], "tags": {"work": [{"id": "brave", "title": "Brave Software", "create_date": 1533833028.846177, "tags": ["work"], "human_time": "2018-08-09 16:43:48", "desc": ""}, {"id": "cloudflare", "title": "A Solution to Compression Oracles on the Web - Cloudflare", "create_date": 1533833022.682019, "tags": ["work", "research"], "human_time": "2018-08-09 16:43:42", "desc": "<p>Compression is often considered an essential tool when reducing the bandwidth usage of internet services. The impact that the use of such compression schemes can have on security, however, has often been overlooked. The recently detailed CRIME, BREACH, TIME and HEIST attacks on TLS have shown that if an attacker can make requests on behalf of a user then secret information can be extracted from encrypted messages using only the length of the response. Deciding whether an element of a web-page should be secret often depends on the content of the page, however there are some common elements of web-pages which should always remain secret such as Cross-Site Request Forgery (CSRF) tokens. Such tokens are used to ensure that malicious webpages cannot forge requests from a user by enforcing that any request must contain a secret token included in a previous response.</p><p>I worked at Cloudflare last summer to investigate possible solutions to this problem. The result is a project called cf-nocompress. The aim of this project was to develop a tool which automatically mitigates instances of the attack, in particular CSRF extraction, on Cloudflare hosted services transparently without significantly impacting the effectiveness of compression. We have published a proof-of-concept implementation on GitHub, and provide a challenge site and tool which demonstrates the attack in action).</p>"}, {"id": "isg", "title": "PhD - Information Security Group - Royal Holloway", "create_date": 1533833018.571521, "tags": ["work"], "human_time": "2018-08-09 16:43:38", "desc": "<p>I began a PhD with the Information Security Group (ISG) at Royal Holloway in September 2015 as part of the Cyber Security CDT. The CDT is set to take 4 years to complete during which I will be exposed to a wide variety of topics relating to the security of computing devices such as static and dynamic program analysis, cryptography, and network security.</p>"}, {"id": "ig", "title": "Graduate Software Engineer - IG", "create_date": 1533832112.37042, "tags": ["work"], "human_time": "2018-08-09 16:28:32", "desc": "<p>IG is the world-leading provider of contracts for difference (CFDs) and financial spread betting, and the UK's largest forex provider.</p><p>I joined IG as a graduate developer in 2014. Over my first year there I will be working in several teams in the company, taking on a variety of different software development roles.</p><p>Working at IG has given me key experience in developing large complex systems, working as a member of an agile team, and working with dependencies in extremely complex system being contributed to by many different teams. It has also given me experience with frontend development and Javascript, an area of software engineering that I had not really explored.</p>"}, {"id": "walking_app", "title": "Runnymede Explored - National Trust", "create_date": 1533832016.114681, "tags": ["work"], "human_time": "2018-08-09 16:26:56", "desc": "<p>Throughout 2013 and 2014 I was part of a small agile development team which was tasked with creating a program capable of giving historical information on walks through the Magna Carta site in preparation for the 800 year anniversary of its signing.</p><p>The project required the development of a visual editor, a web frontend, an Android and iPhone application and a server backend. All of the application front ends and the editor interacted with a server which enabled us to easily create and display a large database of information about the site in a formatted way.</p><p>The server also allowed the entire database to be dumped in JSON, which allowed for offline viewing of the walks, an important feature as the Magna Carta site had limited wireless data coverage.</p>"}], "tutorials": [{"id": "rewrite_scripts_chrome", "title": "How to rewrite incoming JavaScript in Chromium", "create_date": 1533847554.552199, "tags": ["javascript", "tutorials", "chromium"], "human_time": "2018-08-09 20:45:54", "desc": ""}, {"id": "expose_high_fidelity_logs", "title": "A short tutorial on logging in ExpoSE", "create_date": 1533847431.223146, "tags": ["expose", "tutorials", "javascript"], "human_time": "2018-08-09 20:43:51", "desc": ""}, {"id": "static_as_blog", "title": "Developing a statically served blog", "create_date": 1533847368.225782, "tags": ["tutorials", "web", "python"], "human_time": "2018-08-09 20:42:48", "desc": ""}], "web": [{"id": "static_as_blog", "title": "Developing a statically served blog", "create_date": 1533847368.225782, "tags": ["tutorials", "web", "python"], "human_time": "2018-08-09 20:42:48", "desc": ""}], "python": [{"id": "static_as_blog", "title": "Developing a statically served blog", "create_date": 1533847368.225782, "tags": ["tutorials", "web", "python"], "human_time": "2018-08-09 20:42:48", "desc": ""}], "projects": [{"title": "ExpoSE: Practical Symbolic Execution of Standalone JavaScript", "id": "expose", "date": "2015 onward", "create_date": 1533834600.512846, "tags": ["projects", "research", "papers"], "human_time": "2018-08-09 17:10:00", "desc": "\n\n<p>JavaScript has evolved into a versatile ecosystem for not just the\nweb, but also a wide range of server-side and client-side applications.\nWith this increased scope, the potential impact of bugs increases.\nDespite this, testing tools for JavaScript have remained relatively primitive,\nlargely due to the languages complex implementation and confusing specification.</p>\n\n<p>ExpoSE is a dynamic symbolic execution (DSE) tool for JavaScript with support for asynchronous events, strings, and complex regular expressions (including capture groups). It also supports concurrent test-case execution and provides detailed coverage statistics.</p>\n\n"}, {"id": "z3javascript", "title": "Z3JavaScript", "create_date": 1533834597.7674901, "tags": ["projects"], "human_time": "2018-08-09 17:09:57", "desc": "\n\n<p>Before we can symbolically execute JavaScript we need a way to invoke an SMT solver directly from JavaScript, however we found that there is almost no existing language support for Node.js. To remedy this we developed Z3JavaScript, an NPM-installable set of bindings to the popular SMT solver Z3. In addition to a set of primitive bindings we provide a set of wrapper classes to simplify usage from JavaScript. We also provide a regular expression rewriter which allows for reasoning about regular expressions, capture groups, and backreferences in programs.</p>\n\n"}, {"id": "dawn", "title": "Dawn OS", "create_date": 1533832324.066645, "tags": ["projects"], "human_time": "2018-08-09 16:32:04", "desc": "<p>Dawn is a x86 based operating system (OS) with a process scheduler, virtual memory manager, application loader, a defined set of system calls and a host of other features. This project was undertaken as part of an optional A-level module. The project involved development of a operating system kernel and a set of utility programs, as well as the design of a set of tools designed for the OS which allow the user to interact and perform tasks. The code was primarily written in C (C99), with small amounts of assembly used in the Kernel, as well as some bash or python scripts to automate compilation and deployment of the OS.</p>"}, {"id": "kiniro", "title": "Kiniro", "create_date": 1533832291.134073, "tags": ["projects", "games"], "human_time": "2018-08-09 16:31:31", "desc": ""}, {"title": "LJIT", "id": "ljit", "date": "2017", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>As a recent hobby project I have been working to improve my knowledge of ahead-of-time (AOT) and just-in-time (JIT) compilers. To that end I developed a new LISP style language with a AOT compiler. The project was developed in C++ and includes a LL(1) parser, a AST structure and a AST -> Machine code JIT converter. The resulting language is a simple integer only language which supports recursion and function arguments.</p>"}, {"title": "Scribble", "id": "scribble", "date": "2013 to 2015", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>For my university dissertation I designed and implemented a programming language and virtual machine. The language was designed to make extending existing C++ applications easier and to enable users to extend a programs functionality, increasing the usefulness of a piece of software. The implementation also attempts to reduce the likelihood of security issues by allowing developers to strictly control what functionality the virtual machine exposes to the end user through a simple interface, allowing them to control what access the scripts will have to the host platform.</p>"}], "programming-languages": [{"title": "LJIT", "id": "ljit", "date": "2017", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>As a recent hobby project I have been working to improve my knowledge of ahead-of-time (AOT) and just-in-time (JIT) compilers. To that end I developed a new LISP style language with a AOT compiler. The project was developed in C++ and includes a LL(1) parser, a AST structure and a AST -> Machine code JIT converter. The resulting language is a simple integer only language which supports recursion and function arguments.</p>"}, {"title": "Scribble", "id": "scribble", "date": "2013 to 2015", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>For my university dissertation I designed and implemented a programming language and virtual machine. The language was designed to make extending existing C++ applications easier and to enable users to extend a programs functionality, increasing the usefulness of a piece of software. The implementation also attempts to reduce the likelihood of security issues by allowing developers to strictly control what functionality the virtual machine exposes to the end user through a simple interface, allowing them to control what access the scripts will have to the host platform.</p>"}], "expose": [{"id": "expose_high_fidelity_logs", "title": "A short tutorial on logging in ExpoSE", "create_date": 1533847431.223146, "tags": ["expose", "tutorials", "javascript"], "human_time": "2018-08-09 20:43:51", "desc": ""}], "javascript": [{"id": "rewrite_scripts_chrome", "title": "How to rewrite incoming JavaScript in Chromium", "create_date": 1533847554.552199, "tags": ["javascript", "tutorials", "chromium"], "human_time": "2018-08-09 20:45:54", "desc": ""}, {"id": "expose_high_fidelity_logs", "title": "A short tutorial on logging in ExpoSE", "create_date": 1533847431.223146, "tags": ["expose", "tutorials", "javascript"], "human_time": "2018-08-09 20:43:51", "desc": ""}], "research": [{"title": "ExpoSE: Practical Symbolic Execution of Standalone JavaScript", "id": "expose", "date": "2015 onward", "create_date": 1533834600.512846, "tags": ["projects", "research", "papers"], "human_time": "2018-08-09 17:10:00", "desc": "\n\n<p>JavaScript has evolved into a versatile ecosystem for not just the\nweb, but also a wide range of server-side and client-side applications.\nWith this increased scope, the potential impact of bugs increases.\nDespite this, testing tools for JavaScript have remained relatively primitive,\nlargely due to the languages complex implementation and confusing specification.</p>\n\n<p>ExpoSE is a dynamic symbolic execution (DSE) tool for JavaScript with support for asynchronous events, strings, and complex regular expressions (including capture groups). It also supports concurrent test-case execution and provides detailed coverage statistics.</p>\n\n"}, {"id": "cloudflare", "title": "A Solution to Compression Oracles on the Web - Cloudflare", "create_date": 1533833022.682019, "tags": ["work", "research"], "human_time": "2018-08-09 16:43:42", "desc": "<p>Compression is often considered an essential tool when reducing the bandwidth usage of internet services. The impact that the use of such compression schemes can have on security, however, has often been overlooked. The recently detailed CRIME, BREACH, TIME and HEIST attacks on TLS have shown that if an attacker can make requests on behalf of a user then secret information can be extracted from encrypted messages using only the length of the response. Deciding whether an element of a web-page should be secret often depends on the content of the page, however there are some common elements of web-pages which should always remain secret such as Cross-Site Request Forgery (CSRF) tokens. Such tokens are used to ensure that malicious webpages cannot forge requests from a user by enforcing that any request must contain a secret token included in a previous response.</p><p>I worked at Cloudflare last summer to investigate possible solutions to this problem. The result is a project called cf-nocompress. The aim of this project was to develop a tool which automatically mitigates instances of the attack, in particular CSRF extraction, on Cloudflare hosted services transparently without significantly impacting the effectiveness of compression. We have published a proof-of-concept implementation on GitHub, and provide a challenge site and tool which demonstrates the attack in action).</p>"}, {"title": "Analyzing modern (ES6) JavaScript with Jalangi2", "id": "es6jalangi", "date": "2018", "create_date": 1533832867.3697422, "tags": ["research"], "human_time": "2018-08-09 16:41:07", "desc": "<p>As part of a recent piece of work with ExpoSE we found that Jalangi2 often fails to analyze JavaScript programs which use features from recent JavaScript standards. In particular, a common point of failure is the use of let or const keywords. As such, we were unable to analyze a large number of the libraries we downloaded from the NPM package manager. As we want to be able to execute ExpoSE on real-world software we had to find a modification of Jalangi2 that would permit analysis of such code.</p>"}], "papers": [{"title": "ExpoSE: Practical Symbolic Execution of Standalone JavaScript", "id": "expose", "date": "2015 onward", "create_date": 1533834600.512846, "tags": ["projects", "research", "papers"], "human_time": "2018-08-09 17:10:00", "desc": "\n\n<p>JavaScript has evolved into a versatile ecosystem for not just the\nweb, but also a wide range of server-side and client-side applications.\nWith this increased scope, the potential impact of bugs increases.\nDespite this, testing tools for JavaScript have remained relatively primitive,\nlargely due to the languages complex implementation and confusing specification.</p>\n\n<p>ExpoSE is a dynamic symbolic execution (DSE) tool for JavaScript with support for asynchronous events, strings, and complex regular expressions (including capture groups). It also supports concurrent test-case execution and provides detailed coverage statistics.</p>\n\n"}], "chromium": [{"id": "rewrite_scripts_chrome", "title": "How to rewrite incoming JavaScript in Chromium", "create_date": 1533847554.552199, "tags": ["javascript", "tutorials", "chromium"], "human_time": "2018-08-09 20:45:54", "desc": ""}], "games": [{"id": "kiniro", "title": "Kiniro", "create_date": 1533832291.134073, "tags": ["projects", "games"], "human_time": "2018-08-09 16:31:31", "desc": ""}]}}