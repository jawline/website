[{"id": "cloudflare", "title": "A Solution to Compression Oracles on the Web - Cloudflare", "create_date": 1533833022.682019, "tags": ["work", "research"], "human_time": "2018-08-09 16:43:42", "desc": "<p>Compression is often considered an essential tool when reducing the bandwidth usage of internet services. The impact that the use of such compression schemes can have on security, however, has often been overlooked. The recently detailed CRIME, BREACH, TIME and HEIST attacks on TLS have shown that if an attacker can make requests on behalf of a user then secret information can be extracted from encrypted messages using only the length of the response. Deciding whether an element of a web-page should be secret often depends on the content of the page, however there are some common elements of web-pages which should always remain secret such as Cross-Site Request Forgery (CSRF) tokens. Such tokens are used to ensure that malicious webpages cannot forge requests from a user by enforcing that any request must contain a secret token included in a previous response.</p><p>I worked at Cloudflare last summer to investigate possible solutions to this problem. The result is a project called cf-nocompress. The aim of this project was to develop a tool which automatically mitigates instances of the attack, in particular CSRF extraction, on Cloudflare hosted services transparently without significantly impacting the effectiveness of compression. We have published a proof-of-concept implementation on GitHub, and provide a challenge site and tool which demonstrates the attack in action).</p>"}, {"title": "Analyzing modern (ES6) JavaScript with Jalangi2", "id": "es6jalangi", "date": "2018", "create_date": 1533832867.3697422, "tags": ["research"], "human_time": "2018-08-09 16:41:07", "desc": "<p>As part of a recent piece of work with ExpoSE we found that Jalangi2 often fails to analyze JavaScript programs which use features from recent JavaScript standards. In particular, a common point of failure is the use of let or const keywords. As such, we were unable to analyze a large number of the libraries we downloaded from the NPM package manager. As we want to be able to execute ExpoSE on real-world software we had to find a modification of Jalangi2 that would permit analysis of such code.</p>"}, {"title": "ExpoSE: Practical Symbolic Execution of Standalone JavaScript", "id": "expose", "date": "2015 onward", "create_date": 1533834600.512846, "tags": ["projects", "research", "papers"], "human_time": "2018-08-09 17:10:00", "desc": "\n\n<p>JavaScript has evolved into a versatile ecosystem for not just the\nweb, but also a wide range of server-side and client-side applications.\nWith this increased scope, the potential impact of bugs increases.\nDespite this, testing tools for JavaScript have remained relatively primitive,\nlargely due to the languages complex implementation and confusing specification.</p>\n\n<p>ExpoSE is a dynamic symbolic execution (DSE) tool for JavaScript with support for asynchronous events, strings, and complex regular expressions (including capture groups). It also supports concurrent test-case execution and provides detailed coverage statistics.</p>\n\n"}]