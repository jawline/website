[{"id": "dawn", "title": "Dawn OS", "create_date": 1533832324.066645, "tags": ["projects"], "human_time": "2018-08-09 16:32:04", "desc": "<p>Dawn is a x86 based operating system (OS) with a process scheduler, virtual memory manager, application loader, a defined set of system calls and a host of other features. This project was undertaken as part of an optional A-level module. The project involved development of a operating system kernel and a set of utility programs, as well as the design of a set of tools designed for the OS which allow the user to interact and perform tasks. The code was primarily written in C (C99), with small amounts of assembly used in the Kernel, as well as some bash or python scripts to automate compilation and deployment of the OS.</p>"}, {"title": "LJIT", "id": "ljit", "date": "2017", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>As a recent hobby project I have been working to improve my knowledge of ahead-of-time (AOT) and just-in-time (JIT) compilers. To that end I developed a new LISP style language with a AOT compiler. The project was developed in C++ and includes a LL(1) parser, a AST structure and a AST -> Machine code JIT converter. The resulting language is a simple integer only language which supports recursion and function arguments.</p>"}, {"title": "Scribble", "id": "scribble", "date": "2013 to 2015", "create_date": 1533825900, "tags": ["projects", "programming-languages"], "human_time": "2018-08-09 14:45:00", "desc": "<p>For my university dissertation I designed and implemented a programming language and virtual machine. The language was designed to make extending existing C++ applications easier and to enable users to extend a programs functionality, increasing the usefulness of a piece of software. The implementation also attempts to reduce the likelihood of security issues by allowing developers to strictly control what functionality the virtual machine exposes to the end user through a simple interface, allowing them to control what access the scripts will have to the host platform.</p>"}, {"id": "z3javascript", "title": "Z3JavaScript", "create_date": 1533834597.7674901, "tags": ["projects"], "human_time": "2018-08-09 17:09:57", "desc": "\n\n<p>Before we can symbolically execute JavaScript we need a way to invoke an SMT solver directly from JavaScript, however we found that there is almost no existing language support for Node.js. To remedy this we developed Z3JavaScript, an NPM-installable set of bindings to the popular SMT solver Z3. In addition to a set of primitive bindings we provide a set of wrapper classes to simplify usage from JavaScript. We also provide a regular expression rewriter which allows for reasoning about regular expressions, capture groups, and backreferences in programs.</p>\n\n"}, {"title": "ExpoSE: Practical Symbolic Execution of Standalone JavaScript", "id": "expose", "date": "2015 onward", "create_date": 1533834600.512846, "tags": ["projects", "research", "papers"], "human_time": "2018-08-09 17:10:00", "desc": "\n\n<p>JavaScript has evolved into a versatile ecosystem for not just the\nweb, but also a wide range of server-side and client-side applications.\nWith this increased scope, the potential impact of bugs increases.\nDespite this, testing tools for JavaScript have remained relatively primitive,\nlargely due to the languages complex implementation and confusing specification.</p>\n\n<p>ExpoSE is a dynamic symbolic execution (DSE) tool for JavaScript with support for asynchronous events, strings, and complex regular expressions (including capture groups). It also supports concurrent test-case execution and provides detailed coverage statistics.</p>\n\n"}, {"id": "kiniro", "title": "Kiniro", "create_date": 1533832291.134073, "tags": ["projects", "games"], "human_time": "2018-08-09 16:31:31", "desc": ""}]